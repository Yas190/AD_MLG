geom_hline(yintercept = c(-2, 0, 2), linetype = "dashed", color = "red") +
labs(title = "Resíduos de Desvio vs Índices", x = "Índice", y = "Resíduo de Desvio") +
theme_minimal()
# Converter para gráfico interativo com plotly
ggplotly(ggplot_residuos, tooltip = "text")
# Verificação do ajuste do modelo usando o desvio
n <- nrow(df2) # Tamanho amostral
n
D <- deviance(modelo) # Desvio do modelo
gl <- n - modelo$rank # Graus de liberdade
pvalor <- 1 - pchisq(D, gl) # Nível descritivo
cat("P-valor para o ajuste do modelo:", pvalor, "
")
#Base sem observação influente
df_model2 <- as.data.frame(df_model[-246, ])
### ANÁLISE DE DIAGNÓSTICO
residuos <- df_model2 %>%
mutate(
Index = row_number(),                              # Índice de cada observação
resid_deviance = residuals(modelo, type = "deviance")  # Resíduo de deviance
)
# Criar o gráfico com ggplot
ggplot_residuos <- ggplot(residuos, aes(x = Index, y = resid_deviance)) +
geom_point(color = "forestgreen") +
geom_hline(yintercept = c(-2, 0, 2), linetype = "dashed", color = "red") +
labs(title = "Resíduos de Deviance vs Índices", x = "Índice", y = "Resíduo de Deviance") +
theme_minimal()
### ANÁLISE DE DIAGNÓSTICO
residuos <- df_model2 %>%
mutate(
Index = row_number(),                              # Índice de cada observação
resid_deviance = residuals(modelo, type = "deviance")  # Resíduo de deviance
)
# Criar o gráfico com ggplot
ggplot_residuos <- ggplot(residuos, aes(x = Index, y = resid_deviance)) +
geom_point(color = "forestgreen") +
geom_hline(yintercept = c(-2, 0, 2), linetype = "dashed", color = "red") +
labs(title = "Resíduos de Deviance vs Índices", x = "Índice", y = "Resíduo de Deviance") +
theme_minimal()
ggplotly(ggplot_residuos, tooltip = "text")
### ANÁLISE DE DIAGNÓSTICO
residuos <- df_model2 %>%
mutate(
Index = row_number(),                              # Índice de cada observação
resid_deviance = residuals(modelo, type = "deviance")  # Resíduo de deviance
)
# Criar o gráfico com ggplot
ggplot_residuos <- ggplot(residuos, aes(x = Index, y = resid_deviance)) +
geom_point(color = "forestgreen") +
geom_hline(yintercept = c(-2, 0, 2), linetype = "dashed", color = "red") +
labs(title = "Resíduos de Deviance vs Índices", x = "Índice", y = "Resíduo de Deviance") +
theme_minimal()
ggplot_residuos
### ANÁLISE DE DIAGNÓSTICO
residuos <- df_model2 %>%
mutate(
Index = row_number(),                              # Índice de cada observação
resid_deviance = residuals(modelo, type = "deviance")  # Resíduo de deviance
)
# Criar o gráfico com ggplot
ggplot_residuos <- ggplot(residuos, aes(x = Index, y = resid_deviance)) +
geom_point(color = "forestgreen") +
geom_hline(yintercept = c(-2, 0, 2), linetype = "dashed", color = "red") +
labs(
title = "Residuos de Deviance vs Indices",  # Retirada de acentos
x = "Indice",  # Retirada de acentos
y = "Residuos de Deviance"  # Retirada de acentos
) +
theme_minimal()
ggplot_residuos
### ANÁLISE DE DIAGNÓSTICO
residuos <- df_model2 %>%
mutate(
Index = row_number(),                              # Índice de cada observação
resid_deviance = residuals(modelo, type = "deviance")  # Resíduo de deviance
)
# Criar o gráfico com ggplot
ggplot_residuos <- ggplot(residuos, aes(x = Index, y = resid_deviance)) +
geom_point(color = "forestgreen") +
geom_hline(yintercept = c(-2, 0, 2), linetype = "dashed", color = "red") +
labs(
title = "Residuos de Deviance vs Indices",  # Retirada de acentos
x = "Indice",  # Retirada de acentos
y = "Residuos de Deviance"  # Retirada de acentos
) +
theme_minimal(
ggplotly(ggplot_residuos, tooltip = "text")
### ANÁLISE DE DIAGNÓSTICO
residuos <- df_model2 %>%
mutate(
Index = row_number(),                              # Índice de cada observação
resid_deviance = residuals(modelo, type = "deviance")  # Resíduo de deviance
)
# Criar o gráfico com ggplot
ggplot_residuos <- ggplot(residuos, aes(x = Index, y = resid_deviance)) +
geom_point(color = "forestgreen") +
geom_hline(yintercept = c(-2, 0, 2), linetype = "dashed", color = "red") +
labs(
title = "Residuos de Deviance vs Indices",  # Retirada de acentos
x = "Indice",  # Retirada de acentos
y = "Residuos de Deviance"  # Retirada de acentos
) +
theme_minimal()
ggplotly(ggplot_residuos, tooltip = "text")
### ANÁLISE DE DIAGNÓSTICO
residuos <- df_model2 %>%
mutate(
Index = row_number(),                              # Índice de cada observação
resid_deviance = residuals(modelo, type = "deviance")  # Resíduo de deviance
)
# Criar o gráfico com ggplot
ggplot_residuos <- ggplot(residuos, aes(x = Index, y = resid_deviance, text = paste(
"Índice:", Index,
"<br>Resíduo de Deviance:", round(resid_deviance, 3)
))) +
geom_point(color = "forestgreen") +
geom_hline(yintercept = c(-2, 0, 2), linetype = "dashed", color = "red") +
labs(
title = "Resíduos de Deviance vs Índices",
x = "Índice",
y = "Resíduo de Deviance"
) +
theme_minimal()
ggplotly(ggplot_residuos, tooltip = "text")
### ANÁLISE DE DIAGNÓSTICO
residuos <- df_model2 %>%
mutate(
Index = row_number(),                              # Índice de cada observação
resid_deviance = residuals(modelo, type = "deviance")  # Resíduo de deviance
)
# Criar o gráfico com ggplot
ggplot_residuos <- ggplot(residuos, aes(x = Index, y = resid_deviance, text = paste(
"indice:", Index,
"<br>Residuo de Deviance:", round(resid_deviance, 3)
))) +
geom_point(color = "forestgreen") +
geom_hline(yintercept = c(-2, 0, 2), linetype = "dashed", color = "red") +
labs(
title = "Residuos de Deviance vs indices",
x = "indice",
y = "Residuo de Deviance"
) +
theme_minimal()
ggplotly(ggplot_residuos, tooltip = "text")
# Alavancagem
alavancagem <- hatvalues(modelo)
df$Alavancagem <- alavancagem
# Alavancagem
alavancagem <- hatvalues(modelo)
df$Alavancagem <- alavancagem
# Alavancagem
alavancagem <- hatvalues(modelo)
df$Alavancagem <- alavancagem
# Alavancagem
alavancagem <- hatvalues(modelo)
df2$Alavancagem <- alavancagem
limiar_alavancagem <- 2 * mean(alavancagem)
pontos_alavancagem <- which(alavancagem > limiar_alavancagem)
cat("Pontos influentes por alavancagem (>", limiar_alavancagem, "):", pontos_alavancagem, "\n")
# Gráfico de alavancagem por índice
ggplot_alavancagem <- ggplot(df2, aes(x = 1:nrow(df2), y = Alavancagem, text = paste("Índice:", 1:nrow(df2), "<br>Alavancagem:", round(Alavancagem, 3)))) +
geom_point(color = "steelblue") +
geom_hline(yintercept = limiar_alavancagem, linetype = "dashed", color = "red") +
labs(title = "Alavancagem por Índice", x = "Índice", y = "Alavancagem") +
theme_minimal()
ggplotly(ggplot_alavancagem, tooltip = "text")
Sys.setlocale("LC_ALL", "en_US.UTF-8")  # Configura o ambiente para UTF-8
# Alavancagem
alavancagem <- hatvalues(modelo)
df2$Alavancagem <- alavancagem
limiar_alavancagem <- 2 * mean(alavancagem)
pontos_alavancagem <- which(alavancagem > limiar_alavancagem)
cat("Pontos influentes por alavancagem (>", limiar_alavancagem, "):", pontos_alavancagem, "\n")
# Gráfico de alavancagem por índice
ggplot_alavancagem <- ggplot(df2, aes(x = 1:nrow(df2), y = Alavancagem, text = paste("Índice:", 1:nrow(df2), "<br>Alavancagem:", round(Alavancagem, 3)))) +
geom_point(color = "steelblue") +
geom_hline(yintercept = limiar_alavancagem, linetype = "dashed", color = "red") +
labs(title = "Alavancagem por Índice", x = "Índice", y = "Alavancagem") +
theme_minimal()
ggplotly(ggplot_alavancagem, tooltip = "text")
# DFFITS
dffits_vals <- dffits(modelo)
df$DFFITS <- dffits_vals
# DFFITS
dffits_vals <- dffits(modelo)
df2$DFFITS <- dffits_vals
# Calcular limiar de referência
n <- nrow(df2)  # Número de observações
k <- length(coefficients(modelo))  # Número de preditores (incluindo intercepto)
limiar_dffits <- 2 * sqrt(k / n)
limiar_dffits <- 2 * sqrt(ncol(df2) / nrow(df2))
pontos_dffits <- which(abs(dffits_vals) > limiar_dffits)
ggplot_dffits <- ggplot(df2, aes(x = 1:nrow(df), y = DFFITS, text = paste("Índice:", 1:nrow(df2), "<br>DFFITS:", round(DFFITS, 3)))) +
geom_point(color = "firebrick") +
geom_hline(yintercept = c(limiar_dffits, -limiar_dffits), linetype = "dashed", color = "blue") +
labs(title = "DFFITS por Índice", x = "Índice", y = "DFFITS") +
theme_minimal()
ggplotly(ggplot_dffits, tooltip = "text")
# DFFITS
dffits_vals <- dffits(modelo)
df2$DFFITS <- dffits_vals
# Calcular limiar de referência
n <- nrow(df2)  # Número de observações
k <- length(coefficients(modelo))  # Número de preditores (incluindo intercepto)
limiar_dffits <- 2 * sqrt(k / n)
limiar_dffits <- 2 * sqrt(ncol(df2) / nrow(df2))
pontos_dffits <- which(abs(dffits_vals) > limiar_dffits)
ggplot_dffits <- ggplot(df2, aes(x = 1:nrow(df2), y = DFFITS, text = paste("Índice:", 1:nrow(df2), "<br>DFFITS:", round(DFFITS, 3)))) +
geom_point(color = "firebrick") +
geom_hline(yintercept = c(limiar_dffits, -limiar_dffits), linetype = "dashed", color = "blue") +
labs(title = "DFFITS por Índice", x = "Índice", y = "DFFITS") +
theme_minimal()
ggplotly(ggplot_dffits, tooltip = "text")
cat("Pontos influentes por DFFITS (|>|", limiar_dffits, "):", pontos_dffits, "\n")
ggplot_dffits <- ggplot(df2, aes(x = 1:nrow(df2), y = DFFITS, text = paste("Índice:", 1:nrow(df2), "<br>DFFITS:", round(DFFITS, 3)))) +
geom_point(color = "firebrick") +
geom_hline(yintercept = c(limiar_dffits, -limiar_dffits), linetype = "dashed", color = "blue") +
labs(title = "DFFITS por Índice", x = "Índice", y = "DFFITS") +
theme_minimal()
ggplotly(ggplot_dffits, tooltip = "text")
# Distância de Cook
cooks_dist <- cooks.distance(modelo)
df2$Cooks <- cooks_dist
# Cálculo dinâmico do limiar
n <- nrow(df2)  # Número de observações
k <- length(coefficients(modelo)) - 1  # Número de preditores (excluindo intercepto)
limiar_cooks <- 4 / (n - k - 1)
ggplot_cooks <- ggplot(df, aes(x = 1:nrow(df2), y = Cooks, text = paste("Índice:", 1:nrow(df2), "<br>Distância de Cook:", round(Cooks, 3)))) +
geom_point(color = "darkgreen") +
geom_hline(yintercept = limiar_cooks, linetype = "dashed", color = "blue") +
geom_hline(yintercept = c(0.5, 1), linetype = "dotted", color = "red") +
labs(title = "Distância de Cook por Índice", x = "Índice", y = "Distância de Cook") +
coord_cartesian(ylim = c(0, max(c(min(max(cooks_dist), 0.1), limiar_cooks + 0.01)))) +  # Ajuste dinâmico no eixo y
theme_minimal()
ggplotly(ggplot_cooks, tooltip = "text")
# Distância de Cook
cooks_dist <- cooks.distance(modelo)
df2$Cooks <- cooks_dist
# Cálculo dinâmico do limiar
n <- nrow(df2)  # Número de observações
k <- length(coefficients(modelo)) - 1  # Número de preditores (excluindo intercepto)
limiar_cooks <- 4 / (n - k - 1)
ggplot_cooks <- ggplot(df2, aes(x = 1:nrow(df2), y = Cooks, text = paste("Índice:", 1:nrow(df2), "<br>Distância de Cook:", round(Cooks, 3)))) +
geom_point(color = "darkgreen") +
geom_hline(yintercept = limiar_cooks, linetype = "dashed", color = "blue") +
geom_hline(yintercept = c(0.5, 1), linetype = "dotted", color = "red") +
labs(title = "Distância de Cook por Índice", x = "Índice", y = "Distância de Cook") +
coord_cartesian(ylim = c(0, max(c(min(max(cooks_dist), 0.1), limiar_cooks + 0.01)))) +  # Ajuste dinâmico no eixo y
theme_minimal()
ggplotly(ggplot_cooks, tooltip = "text")
# Verificação da função de ligação
eta_hat <- modelo$fitted.values
eta_hat2 <- eta_hat^2
verificar_ligacao <- glm(`Clicked on Ad` ~ Age + `Daily Time Spent on Site` + `Area Income` + `Daily Internet Usage` + eta_hat2,
data = df, family = binomial)
# Verificação da função de ligação
eta_hat <- modelo$fitted.values
eta_hat2 <- eta_hat^2
verificar_ligacao <- glm(`Clicked on Ad` ~ Age + `Daily Time Spent on Site` + `Area Income` + `Daily Internet Usage` + eta_hat2,
data = df2, family = binomial)
summary(verificar_ligacao)
setwd("C:/Users/yasmin.pires/Downloads/MLG")
# interpretaC'C#o das covariC!veis
# Age
exp(1.709e-01)
summary(modelo_old)
summary(modelo)
# interpretaC'C#o das covariC!veis
# Age
exp(1.843e-01)
#`Daily Time Spent on Site
exp(-1.946e-01)
#`Daily Internet Usage`
exp(-6.438e-02)
#`Area Income`
exp(1.441e-04)
source("C:/Users/yasmin.pires/Downloads/MLG/AD_MLG.R")
# Age
exp(1.843e-01)
# 1.186372
# InterpretaC'C#o: Mantendo as demais covariC!veis em um valor fixo, ocorre um aumento
# de 17% nas chances de clicar no anC:ncio por um aumento de uma unidade na idade.
#`Daily Time Spent on Site
exp(-1.946e-01)
# 0.8253894
# InterpretaC'C#o: Mantendo as demais covariC!veis em um valor fixo, ocorre uma diminuiC'C#o
# de 19% nas chances de clicar no anC:ncio quando diminui quase uma unidade no tempo diC!rio gasto no site.
#`Area Income`
exp(1.441e-04)
#`Daily Internet Usage`
exp(-6.438e-02)
# Configuração do relatório
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Carregar pacotes necessários
library(ggplot2)
library(dplyr)
library(readr)
library(hnp)
library(modEvA)
library(broom)
library(reshape2)
library(ggiraph)
library(plotly)
# Age
exp(1.843e-01)
# 1.186372
# InterpretaC'C#o: Mantendo as demais covariC!veis em um valor fixo, ocorre um aumento
# de 17% nas chances de clicar no anC:ncio por um aumento de uma unidade na idade.
#`Daily Time Spent on Site
exp(-1.946e-01)
# 0.8253894
# InterpretaC'C#o: Mantendo as demais covariC!veis em um valor fixo, ocorre uma diminuiC'C#o
# de 19% nas chances de clicar no anC:ncio quando diminui quase uma unidade no tempo diC!rio gasto no site.
#`Area Income`
exp(1.441e-04)
#`Daily Internet Usage`
exp(-6.438e-02)
# 0.9380894
# InterpretaC'C#o: Mantendo as demais covariC!veis em um valor fixo, ocorre uma diminuiC'C#o
# de 6% nas chances de clicar no anC:ncio quando diminui quase uma unidade no tempo diC!rio de internet.
# Age
exp(1.843e-01)
#`Daily Time Spent on Site
exp(-1.946e-01)
#`Area Income`
exp(1.441e-04)
#`Daily Internet Usage`
exp(-6.438e-02)
# Dados para a tabela
variaveis <- c("Idade",
"Tempo diário no site",
"Renda anual",
"Uso diário da internet")
coeficientes <- c(0.1843, -0.1946, 0.0001441, -0.06438)
razão_de_chances <- exp(coeficientes)
interpretação <- c("Aumenta as chances do evento em 20,2% para cada unidade adicional de idade.",
"Reduz as chances do evento em 17,7% para cada unidade a mais de tempo no site.",
"Aumenta as chances do evento em 0,0144% para cada unidade a mais na renda anual.",
"Reduz as chances do evento em 6,2% para cada unidade a mais de uso diário da internet.")
# Criando a tabela
tabela_resumo <- data.frame(
Variável = variaveis,
Coeficiente = coeficientes,
`Razão de Chances (OR)` = round(razão_de_chances, 3),
Interpretação = interpretação
)
# Exibindo a tabela com kable
kable(tabela_resumo, align = "c", col.names = c("Variável", "Coeficiente (β)", "Razão de Chances (OR)", "Interpretação"))
# Configuração do relatório
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Carregar pacotes necessários
library(ggplot2)
library(dplyr)
library(readr)
library(hnp)
library(modEvA)
library(broom)
library(reshape2)
library(ggiraph)
library(plotly)
library(knitr)
# Dados para a tabela
variaveis <- c("Idade",
"Tempo diário no site",
"Renda anual",
"Uso diário da internet")
coeficientes <- c(0.1843, -0.1946, 0.0001441, -0.06438)
razão_de_chances <- exp(coeficientes)
interpretação <- c("Aumenta as chances do evento em 20,2% para cada unidade adicional de idade.",
"Reduz as chances do evento em 17,7% para cada unidade a mais de tempo no site.",
"Aumenta as chances do evento em 0,0144% para cada unidade a mais na renda anual.",
"Reduz as chances do evento em 6,2% para cada unidade a mais de uso diário da internet.")
# Criando a tabela
tabela_resumo <- data.frame(
Variável = variaveis,
Coeficiente = coeficientes,
`Razão de Chances (OR)` = round(razão_de_chances, 3),
Interpretação = interpretação
)
# Exibindo a tabela com kable
kable(tabela_resumo, align = "c", col.names = c("Variável", "Coeficiente (β)", "Razão de Chances (OR)", "Interpretação"))
# Dados para a tabela
variaveis <- c("Idade",
"Tempo diário no site",
"Renda anual",
"Uso diário da internet")
coeficientes <- c(0.1843, -0.1946, 0.0001441, -0.06438)
razão_de_chances <- exp(coeficientes)
interpretação <- c("Aumenta as chances do evento em 20,2% para cada unidade adicional de idade.",
"Reduz as chances do evento em 17,7% para cada unidade a mais de tempo no site.",
"Aumenta as chances do evento em 0,0144% para cada unidade a mais na renda anual.",
"Reduz as chances do evento em 6,2% para cada unidade a mais de uso diário da internet.")
# Criando a tabela
tabela_resumo <- data.frame(
Variável = variaveis,
Coeficiente = coeficientes,
`Razão de Chances (OR)` = round(razão_de_chances, 3),
Interpretação = interpretação
)
# Exibindo a tabela com kable
kable(tabela_resumo, align = "c", col.names = c("Variável", "Coeficiente (β)", "Razão de Chances (OR)", "Interpretação"))
options(encoding = "UTF-8")
# Dados para a tabela
variaveis <- c("Idade",
"Tempo diário no site",
"Renda anual",
"Uso diário da internet")
coeficientes <- c(0.1843, -0.1946, 0.0001441, -0.06438)
razão_de_chances <- exp(coeficientes)
interpretação <- c("Aumenta as chances do evento em 20,2% para cada unidade adicional de idade.",
"Reduz as chances do evento em 17,7% para cada unidade a mais de tempo no site.",
"Aumenta as chances do evento em 0,0144% para cada unidade a mais na renda anual.",
"Reduz as chances do evento em 6,2% para cada unidade a mais de uso diário da internet.")
# Criando a tabela
tabela_resumo <- data.frame(
Variável = variaveis,
Coeficiente = coeficientes,
`Razão de Chances (OR)` = round(razão_de_chances, 3),
Interpretação = interpretação
)
# Exibindo a tabela com kable
kable(tabela_resumo, align = "c", col.names = c("Variável", "Coeficiente (β)", "Razão de Chances (OR)", "Interpretação"))
# Configuração do relatório
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Carregar pacotes necessários
library(ggplot2)
library(dplyr)
library(readr)
library(hnp)
library(modEvA)
library(broom)
library(reshape2)
library(ggiraph)
library(plotly)
library(knitr)
# Carregar os dados
df <- read_csv("advertising.csv")
df <- as_tibble(df)
str(df)
df2 <- df[-246, ]
# Exibir as primeiras linhas do dataframe
#head(df)
df2 <- as_tibble(df2)
#str(df2)
#summary(df)
# Converter a coluna Timestamp para o formato de data
df$Timestamp <- as.POSIXct(df$Timestamp, format = "%Y-%m-%d %H:%M:%S")
# Percentual das idades mais comuns
df_percentual_age <- df %>%
count(Age) %>%
mutate(percent = n / sum(n) * 100) %>%
arrange(desc(percent)) %>%
head(10)
# Gráfico de barras das idades mais comuns
ggplot(df_percentual_age, aes(x = reorder(Age, -percent), y = percent)) +
geom_bar(stat = "identity", fill = "steelblue", color = "black") +
geom_text(aes(label = sprintf("%.2f%%", percent)), vjust = -0.5, size = 3.5) +
labs(x = "Idade", y = "Percentual", title = "Distribuição Percentual das Idades Mais Comuns") +
theme_minimal(base_size = 14)
# Dados para a tabela
variaveis <- c("Idade",
"Tempo diário no site",
"Renda anual",
"Uso diário da internet")
coeficientes <- c(0.1843, -0.1946, 0.0001441, -0.06438)
razão_de_chances <- exp(coeficientes)
interpretação <- c("Aumenta as chances do evento em 20,2% para cada unidade adicional de idade.",
"Reduz as chances do evento em 17,7% para cada unidade a mais de tempo no site.",
"Aumenta as chances do evento em 0,0144% para cada unidade a mais na renda anual.",
"Reduz as chances do evento em 6,2% para cada unidade a mais de uso diário da internet.")
# Criando a tabela
tabela_resumo <- data.frame(
Variável = variaveis,
Coeficiente = coeficientes,
`Razão de Chances (OR)` = round(razão_de_chances, 3),
Interpretação = interpretação
)
# Exibindo a tabela com kable
kable(tabela_resumo, align = "c", col.names = c("Variável", "Coeficiente", "Razão de Chances (OR)", "Interpretação"))
# Dados para a tabela
variaveis <- c("Idade",
"Tempo diario no site",
"Renda anual",
"Uso diario da internet")
coeficientes <- c(0.1843, -0.1946, 0.0001441, -0.06438)
razao_de_chances <- exp(coeficientes)
interpretacao <- c("Aumenta as chances do evento em 20,2% para cada unidade adicional de idade.",
"Reduz as chances do evento em 17,7% para cada unidade a mais de tempo no site.",
"Aumenta as chances do evento em 0,0144% para cada unidade a mais na renda anual.",
"Reduz as chances do evento em 6,2% para cada unidade a mais de uso diario da internet.")
# Criando a tabela
tabela_resumo <- data.frame(
Variavel = variaveis,
Coeficiente = coeficientes,
`Razao de Chances (OR)` = round(razao_de_chances, 3),
Interpretacao = interpretacao
)
# Exibindo a tabela com kable (sem caracteres especiais)
kable(
tabela_resumo,
align = "c",
col.names = c("Variavel", "Coeficiente (beta)", "Razao de Chances (OR)", "Interpretacao")
)
# Age
exp(1.843e-01)
#`Daily Time Spent on Site
exp(-1.946e-01)
#`Area Income`
exp(1.441e-04)
#`Daily Internet Usage`
exp(-6.438e-02)
install.packages("rsconnect")
